{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started \u00b6 Scar is an interpreted programming language made in Java, which has all major features all programming languages should have. Scar is neither practical nor fast, but serves its purpose: teaching the creator how to make lexers, parsers, interpreters and so on. Error The documentation is ahead of development, some documented features are yet to be implemented Installation \u00b6 The only way to run scar scripts is to clone the repo, start Shell.java and use the built-in run() function to run .scar files. There will be a CLI tool in te future for running scripts.","title":"Getting started"},{"location":"#getting-started","text":"Scar is an interpreted programming language made in Java, which has all major features all programming languages should have. Scar is neither practical nor fast, but serves its purpose: teaching the creator how to make lexers, parsers, interpreters and so on. Error The documentation is ahead of development, some documented features are yet to be implemented","title":"Getting started"},{"location":"#installation","text":"The only way to run scar scripts is to clone the repo, start Shell.java and use the built-in run() function to run .scar files. There will be a CLI tool in te future for running scripts.","title":"Installation"},{"location":"comments/","text":"Comments are pieces of text inside your code which will not be executed. A comment starts with # and stops at a new line 1 2 # This is a comment var stringVariable = \"Hello!\" # Comment after code","title":"Comments"},{"location":"comparison_and_logical_operators/","text":"Comparison & Logical Operators \u00b6 Comparison and Logical operators are used to test for true or false . Comparison Operators \u00b6 Comparison operators are used in logical statements to determine equality or difference between variables or values. Operator Description == equal to != not equal > greater than < less than >= greater than or equal <= less than or equal Logical Operators \u00b6 Logical operators are used to determine the logic between variables or values. Operator Description and logical AND or logical OR not logical NOT","title":"Comparison & Logical Operators"},{"location":"comparison_and_logical_operators/#comparison-logical-operators","text":"Comparison and Logical operators are used to test for true or false .","title":"Comparison &amp; Logical Operators"},{"location":"comparison_and_logical_operators/#comparison-operators","text":"Comparison operators are used in logical statements to determine equality or difference between variables or values. Operator Description == equal to != not equal > greater than < less than >= greater than or equal <= less than or equal","title":"Comparison Operators"},{"location":"comparison_and_logical_operators/#logical-operators","text":"Logical operators are used to determine the logic between variables or values. Operator Description and logical AND or logical OR not logical NOT","title":"Logical Operators"},{"location":"if_else_statement/","text":"if/else Statement \u00b6 The if/else statement executes a block of code if a specified condition is true . If the condition is false , another block of code can be executed. Use comparison & logical operators to create a condition that's either true or false In ScarLang we have the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Syntax \u00b6 The if statement specifies a block of code to be executed if a condition is true : 1 2 3 if ( condition ) { # block of code to be executed if the condition is true } The else statement specifies a block of code to be executed if the condition is false : 1 2 3 4 5 if ( condition ) { # block of code to be executed if the condition is true } else { # block of code to be executed if the condition is false } The else if statement specifies a new condition if the first condition is false : 1 2 3 4 5 6 7 if ( condition1 ) { # block of code to be executed if condition1 is true } else if ( condition2 ) { # block of code to be executed if the condition1 is false and condition2 is true } else { # block of code to be executed if the condition1 is false and condition2 is false } Single line if statement \u00b6 There is also a single line version of the if statement. It is not possible to use else and else if with this single line if statement. 1 if ( 5 == 5 ) -> print ( \"5 is 5!\" )","title":"if/else Statement"},{"location":"if_else_statement/#ifelse-statement","text":"The if/else statement executes a block of code if a specified condition is true . If the condition is false , another block of code can be executed. Use comparison & logical operators to create a condition that's either true or false In ScarLang we have the following conditional statements: Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false","title":"if/else Statement"},{"location":"if_else_statement/#syntax","text":"The if statement specifies a block of code to be executed if a condition is true : 1 2 3 if ( condition ) { # block of code to be executed if the condition is true } The else statement specifies a block of code to be executed if the condition is false : 1 2 3 4 5 if ( condition ) { # block of code to be executed if the condition is true } else { # block of code to be executed if the condition is false } The else if statement specifies a new condition if the first condition is false : 1 2 3 4 5 6 7 if ( condition1 ) { # block of code to be executed if condition1 is true } else if ( condition2 ) { # block of code to be executed if the condition1 is false and condition2 is true } else { # block of code to be executed if the condition1 is false and condition2 is false }","title":"Syntax"},{"location":"if_else_statement/#single-line-if-statement","text":"There is also a single line version of the if statement. It is not possible to use else and else if with this single line if statement. 1 if ( 5 == 5 ) -> print ( \"5 is 5!\" )","title":"Single line if statement"},{"location":"loops/","text":"Loops \u00b6 A loop is a sequence of instructions that is repeated until a certain condition is reached. Examples \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Single line for loop var result = 1 for ( i = 1 to 6 step 1 ) -> var result = result * i print ( result ) # 120 # Multi line for loop var result = 1 for ( i = 1 to 6 step 1 ) { var result = result * i } print ( result ) # 120 # Single line while loop var i = 1000 while ( i > 0 ) -> var i = i - 1 print ( i ) # 0 # Multi line while loop var i = 1000 while ( i > 0 ) { var i = i - 1 } print ( i ) # 0 For Loops \u00b6 for loops are used to loop through a block of code a number of times 1 2 3 var count = 0 for ( i = 1 to 6 step 1 ) -> var count = count + 1 print ( count ) # 5 In this example, i starts out at 1 and the loop will stop before i is 6. Every time the code block is executed i gets incremented by 1. The loop will execute 5 times: when i is 1 , 2 , 3 , 4 and 5 . While Loops \u00b6 while loops are used to loop through a block of code while a specified condition is true 1 2 3 var i = 0 while ( i < 6 ) -> var i = i + 1 print ( i ) # 6 In this example, i starts out at 0 and the loop will stop when i is smaller than 6 Every time the code block is executed i gets incremented by 1. The loop will execute 6 times: when i is 0 , 1 , 2 , 3 , 4 and 5 . Break & Continue \u00b6 The break statement breaks the loop and continues executing the code after the loop (if any) The continue statement breaks one iteration in the loop, and continues with the next iteration in the loop.","title":"Loops"},{"location":"loops/#loops","text":"A loop is a sequence of instructions that is repeated until a certain condition is reached.","title":"Loops"},{"location":"loops/#examples","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Single line for loop var result = 1 for ( i = 1 to 6 step 1 ) -> var result = result * i print ( result ) # 120 # Multi line for loop var result = 1 for ( i = 1 to 6 step 1 ) { var result = result * i } print ( result ) # 120 # Single line while loop var i = 1000 while ( i > 0 ) -> var i = i - 1 print ( i ) # 0 # Multi line while loop var i = 1000 while ( i > 0 ) { var i = i - 1 } print ( i ) # 0","title":"Examples"},{"location":"loops/#for-loops","text":"for loops are used to loop through a block of code a number of times 1 2 3 var count = 0 for ( i = 1 to 6 step 1 ) -> var count = count + 1 print ( count ) # 5 In this example, i starts out at 1 and the loop will stop before i is 6. Every time the code block is executed i gets incremented by 1. The loop will execute 5 times: when i is 1 , 2 , 3 , 4 and 5 .","title":"For Loops"},{"location":"loops/#while-loops","text":"while loops are used to loop through a block of code while a specified condition is true 1 2 3 var i = 0 while ( i < 6 ) -> var i = i + 1 print ( i ) # 6 In this example, i starts out at 0 and the loop will stop when i is smaller than 6 Every time the code block is executed i gets incremented by 1. The loop will execute 6 times: when i is 0 , 1 , 2 , 3 , 4 and 5 .","title":"While Loops"},{"location":"loops/#break-continue","text":"The break statement breaks the loop and continues executing the code after the loop (if any) The continue statement breaks one iteration in the loop, and continues with the next iteration in the loop.","title":"Break &amp; Continue"},{"location":"variables_and_types/","text":"Variables & Types \u00b6 Variables are the names you give to computer memory locations which are used to store values in a computer program. Syntax \u00b6 Here, name is the variable name and val is the value you want to assign 1 var name = val Value Types \u00b6 Supported types are: string, integer, float, array & function Booleans are implemented as integers, where 1 is true and 0 is false Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # Assign var stringVariable = \"Hello!\" var integerVariable = 1 var floatVariable = 1.0 var arrayVariable = [ \"Hello\" , \"world\" ] var anonymousFuncVariable = func ( prefix ) -> prefix + \"!\" var anonymousMultiFuncVariable = func ( prefix ) { return prefix + \"!\" } var resolvedExpression = 123 == 123 # 1 # Reassign var stringVariable = \"Hey!\"","title":"Variables & Types"},{"location":"variables_and_types/#variables-types","text":"Variables are the names you give to computer memory locations which are used to store values in a computer program.","title":"Variables &amp; Types"},{"location":"variables_and_types/#syntax","text":"Here, name is the variable name and val is the value you want to assign 1 var name = val","title":"Syntax"},{"location":"variables_and_types/#value-types","text":"Supported types are: string, integer, float, array & function Booleans are implemented as integers, where 1 is true and 0 is false","title":"Value Types"},{"location":"variables_and_types/#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # Assign var stringVariable = \"Hello!\" var integerVariable = 1 var floatVariable = 1.0 var arrayVariable = [ \"Hello\" , \"world\" ] var anonymousFuncVariable = func ( prefix ) -> prefix + \"!\" var anonymousMultiFuncVariable = func ( prefix ) { return prefix + \"!\" } var resolvedExpression = 123 == 123 # 1 # Reassign var stringVariable = \"Hey!\"","title":"Example"},{"location":"types/array/","text":"Array \u00b6 The array data type is used to store multiple values. An array can hold elements of different types. An array can store any kind of elements \u2014 from integers to strings to functions. Examples \u00b6 More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 var arr = [ \"first\" , \"second\" ] # Operations arr + 3 # [\"first\", \"second\", 3] arr - 0 # [\"second\", 3] arr * [ 4 , \"fifth\" ] # [\"second\", 3, 4, \"fifth\"] var selected = arr / 1 # 3 # Append using a function append ( arr , 6 ) # [\"second\", 3, 4, \"fifth\", 6] # Remove using a function pop ( arr , 2 ) # [\"second\", 3, \"fifth\", 6] # Extend using a function extend ( arr , [ \"seven\" , 8 ]) # [\"second\", 3, \"fifth\", 6, \"seven\", 8] # Returns size of the array var size = length ( arr ) # 6 # Check if type is an array isArray ( arr ) # 1 # Check if empty (falsy or truthy) isTrue ( arr ) # 0 Array Operations \u00b6 Append to Array \u00b6 There are two ways to append a value to an array. The first one is to use the + operator, and the second way is to use the built-in function append() 1 2 3 var arr = [ \"first\" , \"second\" ] arr + 3 # [\"first\", \"second\", 3] append ( arr , \"fourth\" ) # [\"first\", \"second\", 3, \"fourth\"] In the example above we first append 3 to the array using the + operator, then appending \"fourth\" to the array using the built-in function append() Remove from Array \u00b6 There are two ways to remove a value from an array. The first one is to use the - operator, and the second way is to use the built-in function pop() 1 2 3 var arr = [ \"first\" , \"second\" ] arr - 1 # [\"first\"] pop ( arr , 0 ) # [] In the example above we first remove the 1 st element (we count from 0) from the array using the - operator, then removing the 0 th element from the array using the built-in function append() . These actions result in an empty array Extend Array \u00b6 There are two ways to extend an array with another array. The first one is to use the * operator, and the second way is to use the built-in function extend() 1 2 3 var arr = [ \"first\" , \"second\" ] arr * [ 3 , \"fourth\" ] # [\"first\", \"second\", 3, \"fourth\"] extend ( arr , [ 5 , \"sixth\" ]) # [\"first\", \"second\", 3, \"fourth\", 5, \"sixth\"] In the example above we first extend the array with [3, \"fourth\"] using the + operator, then the array with [5, \"sixth\"] using the built-in function append() Get element from array \u00b6 Use the / operator to get a specific element from the array 1 2 var arr = [ \"first\" , \"second\" ] var selected = arr / 1 # \"second\" In the example above we select the 1 st element in the array (we count from 0) and put it in the variable selected . This results in \"second\" Get size of the array \u00b6 Use the built-in function length() to get the size of the array 1 2 var arr = [ \"first\" , \"second\" ] var size = length ( arr ) # 2 In the example above the variable size is 2 because there are two elements in arr","title":"Array"},{"location":"types/array/#array","text":"The array data type is used to store multiple values. An array can hold elements of different types. An array can store any kind of elements \u2014 from integers to strings to functions.","title":"Array"},{"location":"types/array/#examples","text":"More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 var arr = [ \"first\" , \"second\" ] # Operations arr + 3 # [\"first\", \"second\", 3] arr - 0 # [\"second\", 3] arr * [ 4 , \"fifth\" ] # [\"second\", 3, 4, \"fifth\"] var selected = arr / 1 # 3 # Append using a function append ( arr , 6 ) # [\"second\", 3, 4, \"fifth\", 6] # Remove using a function pop ( arr , 2 ) # [\"second\", 3, \"fifth\", 6] # Extend using a function extend ( arr , [ \"seven\" , 8 ]) # [\"second\", 3, \"fifth\", 6, \"seven\", 8] # Returns size of the array var size = length ( arr ) # 6 # Check if type is an array isArray ( arr ) # 1 # Check if empty (falsy or truthy) isTrue ( arr ) # 0","title":"Examples"},{"location":"types/array/#array-operations","text":"","title":"Array Operations"},{"location":"types/array/#append-to-array","text":"There are two ways to append a value to an array. The first one is to use the + operator, and the second way is to use the built-in function append() 1 2 3 var arr = [ \"first\" , \"second\" ] arr + 3 # [\"first\", \"second\", 3] append ( arr , \"fourth\" ) # [\"first\", \"second\", 3, \"fourth\"] In the example above we first append 3 to the array using the + operator, then appending \"fourth\" to the array using the built-in function append()","title":"Append to Array"},{"location":"types/array/#remove-from-array","text":"There are two ways to remove a value from an array. The first one is to use the - operator, and the second way is to use the built-in function pop() 1 2 3 var arr = [ \"first\" , \"second\" ] arr - 1 # [\"first\"] pop ( arr , 0 ) # [] In the example above we first remove the 1 st element (we count from 0) from the array using the - operator, then removing the 0 th element from the array using the built-in function append() . These actions result in an empty array","title":"Remove from Array"},{"location":"types/array/#extend-array","text":"There are two ways to extend an array with another array. The first one is to use the * operator, and the second way is to use the built-in function extend() 1 2 3 var arr = [ \"first\" , \"second\" ] arr * [ 3 , \"fourth\" ] # [\"first\", \"second\", 3, \"fourth\"] extend ( arr , [ 5 , \"sixth\" ]) # [\"first\", \"second\", 3, \"fourth\", 5, \"sixth\"] In the example above we first extend the array with [3, \"fourth\"] using the + operator, then the array with [5, \"sixth\"] using the built-in function append()","title":"Extend Array"},{"location":"types/array/#get-element-from-array","text":"Use the / operator to get a specific element from the array 1 2 var arr = [ \"first\" , \"second\" ] var selected = arr / 1 # \"second\" In the example above we select the 1 st element in the array (we count from 0) and put it in the variable selected . This results in \"second\"","title":"Get element from array"},{"location":"types/array/#get-size-of-the-array","text":"Use the built-in function length() to get the size of the array 1 2 var arr = [ \"first\" , \"second\" ] var size = length ( arr ) # 2 In the example above the variable size is 2 because there are two elements in arr","title":"Get size of the array"},{"location":"types/float/","text":"Float \u00b6 A float is a floating-point number, which means it is a number that has a decimal place. It is stored as a single-precision 32-bit IEEE 754 floating-point. Examples \u00b6 More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var float = 1.5 # Operations var float = float + 1.5 # 3.0 var float = float - 1.2 # 2.8 var float = float * 2.0 # 5.6 var float = float / 3.2 # 1.75 var float = float ^ 2.0 # 3.0625 var float = - float # -3.0625 # Check if type is a float isInteger ( float ) # 1 # Check if not 0.0 (falsy or truthy) isTrue ( float ) # 0","title":"Float"},{"location":"types/float/#float","text":"A float is a floating-point number, which means it is a number that has a decimal place. It is stored as a single-precision 32-bit IEEE 754 floating-point.","title":"Float"},{"location":"types/float/#examples","text":"More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var float = 1.5 # Operations var float = float + 1.5 # 3.0 var float = float - 1.2 # 2.8 var float = float * 2.0 # 5.6 var float = float / 3.2 # 1.75 var float = float ^ 2.0 # 3.0625 var float = - float # -3.0625 # Check if type is a float isInteger ( float ) # 1 # Check if not 0.0 (falsy or truthy) isTrue ( float ) # 0","title":"Examples"},{"location":"types/function/","text":"Function \u00b6 A function is a named section of a program that performs a specific task. In this sense, a function is a type of procedure or routine. A function can take parameters to do operations on and return a value to use after the procedure or routine has ended. Examples \u00b6 More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func function ( prefix ) -> prefix + \"!\" func multilineFunction ( prefix ) { return prefix + \"!\" } var anonymousFunction = func ( prefix ) -> prefix + \"!\" var anonymousMultilineFunction = func ( prefix ) { return prefix + \"!\" } # Check if type is a function isFunction ( multilineFunction ) # 1 Anonymous function \u00b6 An anonymous function is a function that was declared without any named identifier to refer to it. In the examples section, we assign such anonymous functions to variables. This is not the identifier, because we can reassign the anonymous function to a different variable Single line function \u00b6 A single line function does not need to return any values using the return keyword. The result of the single line expression is automatically returned.","title":"Function"},{"location":"types/function/#function","text":"A function is a named section of a program that performs a specific task. In this sense, a function is a type of procedure or routine. A function can take parameters to do operations on and return a value to use after the procedure or routine has ended.","title":"Function"},{"location":"types/function/#examples","text":"More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func function ( prefix ) -> prefix + \"!\" func multilineFunction ( prefix ) { return prefix + \"!\" } var anonymousFunction = func ( prefix ) -> prefix + \"!\" var anonymousMultilineFunction = func ( prefix ) { return prefix + \"!\" } # Check if type is a function isFunction ( multilineFunction ) # 1","title":"Examples"},{"location":"types/function/#anonymous-function","text":"An anonymous function is a function that was declared without any named identifier to refer to it. In the examples section, we assign such anonymous functions to variables. This is not the identifier, because we can reassign the anonymous function to a different variable","title":"Anonymous function"},{"location":"types/function/#single-line-function","text":"A single line function does not need to return any values using the return keyword. The result of the single line expression is automatically returned.","title":"Single line function"},{"location":"types/integer/","text":"Integer \u00b6 The integer data type is used to represent whole numbers, and is stored as a 32-bit signed integer. Examples \u00b6 More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var int = 123 # Operations var int = int + 3 # 126 var int = int - 3 # 123 var int = int * 2 # 246 var int = int / 6 # 41 var int = int ^ 2 # 1681 var int = - int # -1681 # Check if type is an integer isInteger ( int ) # 1 # Check if not 0 (falsy or truthy) isTrue ( int ) # 0","title":"Integer"},{"location":"types/integer/#integer","text":"The integer data type is used to represent whole numbers, and is stored as a 32-bit signed integer.","title":"Integer"},{"location":"types/integer/#examples","text":"More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var int = 123 # Operations var int = int + 3 # 126 var int = int - 3 # 123 var int = int * 2 # 246 var int = int / 6 # 41 var int = int ^ 2 # 1681 var int = - int # -1681 # Check if type is an integer isInteger ( int ) # 1 # Check if not 0 (falsy or truthy) isTrue ( int ) # 0","title":"Examples"},{"location":"types/string/","text":"String \u00b6 The string data type is used to represent text. It is composed of a set of characters that can also contain spaces, numbers, emoji's, etc. The character set is unicode, a list can be found here . Examples \u00b6 More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 var str = \"hell\" # Operations var str = str + \"o\" # \"hello\" var str = str * 2 # \"hellohello\" # Check if type is a string isString ( str ) # 1 # Check if empty (falsy or truthy) isTrue ( str ) # 1 String Operations \u00b6 Extend String \u00b6 A string can be extended by using the + operator on two strings. 1 2 var str = \"ext\" var str = str + \"end\" In the example above the string \"ext\" is extended with \"end\", resulting in \"extend\" Repeat String \u00b6 A string can be repeated with the * operator. You're essentially multiplying the string by a given amount 1 2 var str = \"repeat\" var str = str * 3 In the example above the string \"repeat\" is repeated 3 times, resulting in \"repeatrepeatrepeat\"","title":"String"},{"location":"types/string/#string","text":"The string data type is used to represent text. It is composed of a set of characters that can also contain spaces, numbers, emoji's, etc. The character set is unicode, a list can be found here .","title":"String"},{"location":"types/string/#examples","text":"More on the built-in functions can be found in the Built-in Function section 1 2 3 4 5 6 7 8 9 10 11 var str = \"hell\" # Operations var str = str + \"o\" # \"hello\" var str = str * 2 # \"hellohello\" # Check if type is a string isString ( str ) # 1 # Check if empty (falsy or truthy) isTrue ( str ) # 1","title":"Examples"},{"location":"types/string/#string-operations","text":"","title":"String Operations"},{"location":"types/string/#extend-string","text":"A string can be extended by using the + operator on two strings. 1 2 var str = \"ext\" var str = str + \"end\" In the example above the string \"ext\" is extended with \"end\", resulting in \"extend\"","title":"Extend String"},{"location":"types/string/#repeat-string","text":"A string can be repeated with the * operator. You're essentially multiplying the string by a given amount 1 2 var str = \"repeat\" var str = str * 3 In the example above the string \"repeat\" is repeated 3 times, resulting in \"repeatrepeatrepeat\"","title":"Repeat String"}]}